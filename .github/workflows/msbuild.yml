name: MSBuild

on:
  workflow_dispatch:
  push:
    branches:
      - "main"

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .
  BUILD_CONFIGURATION: Release
  BUILD_PLATFORM: x64

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Run git checkout
      uses: actions/checkout@v5

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v2

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: |
        msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} /p:platform=${{env.BUILD_PLATFORM}} ${{env.SOLUTION_FILE_PATH}}

    - name: Stage artifacts for packaging
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        $destDir = "zemu"
        New-Item -ItemType Directory -Name $destDir -ErrorAction SilentlyContinue
        $fileList = @(
            "${{env.BUILD_PLATFORM}}/${{env.BUILD_CONFIGURATION}}/zemu.exe",
            "firmware/bios.qcow2",
            "firmware/X64_EFI.qcow2",
            "firmware/IA32_EFI.qcow2",
            "firmware/AA64_EFI.qcow2",
            "firmware/ARM_EFI.qcow2",
            "firmware/wim.cpio",
            "firmware/wim.qcow2",
            "firmware/wimldr",
            "firmware/wimldr.x64",
            "firmware/wimldr.ia32",
            "firmware/wimldr.aa64"
        )
        Move-Item -Path $fileList -Destination $destDir

    - name: Create ZIP
      run: Compress-Archive -Path zemu/* -DestinationPath "zemu.zip"

    - name: Generate Release Notes
      env:
        COMMITS_JSON: ${{ toJSON(github.event.commits) }}
      run: |
        $changelogLines = New-Object System.Collections.Generic.List[string]
        if ("${{ github.event_name }}" -eq "push") {
          Write-Host "Generating changelog from push event payload"
          $commits = $env:COMMITS_JSON | ConvertFrom-Json
          if ($null -ne $commits) {
            foreach ($commit in $commits) {
              $shortSha = $commit.id.Substring(0, 7)
              # Take only the first line of the commit message
              $commitMessage = ($commit.message -split "`r?`n")[0]
              $changelogLines.Add("* $commitMessage ($shortSha) by @$($commit.author.name)")
            }
          }
        }
        else {
          Write-Host "Generating changelog for workflow_dispatch event (latest commit)"
          $latest_commit = git log --pretty=format:'* %s (%h) by @%an' -n 1
          $changelogLines.Add($latest_commit)
        }

        $changelogBody = $changelogLines -join "`n"
        if ([string]::IsNullOrWhiteSpace($changelogBody)) {
          $changelogBody = "No new commits in this push. Automated build from commit ${{ github.sha }}."
        }

        $changelogBody | Out-File -FilePath "release_notes.txt" -Encoding utf8

    - name: Delete old release
      continue-on-error: true
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        gh release delete latest --cleanup-tag --yes
      env:
        GH_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

    - name: Release
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        $date_version = (Get-Date -Format 'yyyyMMdd') + ".${{ github.run_number }}"
        gh release create latest "zemu.zip" `
          --prerelease `
          --title "Build $date_version" `
          --notes-file "release_notes.txt"
      env:
        GH_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
